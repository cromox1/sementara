PC-TALIBR2+cromox@PC-TALIBR2 /cygdrive/c/Users/cromox/Desktop/newselenium/UDEMY/PixitMedia
$ py.test.exe -v -s tests/p01google/p01searchpixitmedia_tests.py > consoleoutput1.txt 2>&1

PC-TALIBR2+cromox@PC-TALIBR2 /cygdrive/c/Users/cromox/Desktop/newselenium/UDEMY/PixitMedia
$ cat consoleoutput1.txt

============================= test session starts =============================
platform win32 -- Python 3.6.1, pytest-3.4.2, py-1.5.3, pluggy-0.6.0 -- c:\tools\python36\python.exe
cachedir: .pytest_cache
sensitiveurl: .*
metadata: {'Python': '3.6.1', 'Platform': 'Windows-7-6.1.7601-SP1', 'Packages': {'pytest': '3.4.2', 'py': '1.5.3', 'pluggy': '0.6.0'}, 'Plugins': {'variables': '1.7.1', 'selenium': '1.14.0', 'metadata': '1.7.0', 'html': '1.17.0', 'bdd': '2.21.0', 'base-url': '1.4.1'}, 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk8u172', 'Base URL': '', 'Driver': None, 'Capabilities': {}}
rootdir: C:\Users\cromox\Desktop\newselenium\UDEMY\PixitMedia, inifile:
plugins: variables-1.7.1, selenium-1.14.0, metadata-1.7.0, html-1.17.0, bdd-2.21.0, base-url-1.4.1
collecting ... collected 3 items

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test1_google_pixitmedia_page 
== > Running one time setUp
Python Version = 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)]
Browser version ( opera ) = 55.0.2994.61

--- > Running method level setUp
Result 1  =  True
ResultLast = False
FAILED
--- > Running method level tearDown

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test2_products_page 
--- > Running method level setUp
FAILED
--- > Running method level tearDown

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test3_contactus_page 
--- > Running method level setUp
FAILED
--- > Running method level tearDown

== > Running one time tearDown


================================== FAILURES ===================================
____________ P01SearchPixitMediaTests.test1_google_pixitmedia_page ____________

self = <tests.p01google.p01searchpixitmedia_tests.P01SearchPixitMediaTests testMethod=test1_google_pixitmedia_page>

    @pytest.mark.run(order=1)
    def test1_google_pixitmedia_page(self):
        self.log.info("test1_goto_google_page_started")
        result = self.googlesearchpage.verifyPageURLlow("https://www.google.co.uk")
        self.tstatus.mark(result, "Currently At Google Page Verified")
        print("Result " + str(len(self.tstatus.resultList)) + "  =  " + str(result))
        self.googlesearchpage.gotoSearchArea()
        self.googlesearchpage.searchPixitMedia()
        self.googlesearchpage.gotoPixitMediaPage()
        time.sleep(5)
        result = self.googlesearchpage.verifyPageURLlow("https://www.pixitmedia.com/")
        print("ResultLast = " + str(result))
>       self.tstatus.markFinal("now at pixitmedia page", result, "test1_google_pixitmedia")

tests\p01google\p01searchpixitmedia_tests.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <utilities.teststatus.TestStatus object at 0x0000000004A9F5F8>
testName = 'now at pixitmedia page', result = False
resultMessage = 'test1_google_pixitmedia'

    def markFinal(self, testName, result, resultMessage):
        """
            Mark the final result of the verification point in a test case
            This needs to be called at least once in a test case
            This should be final test status of the test case
            """
        self.setResult(result, resultMessage)
    
        if "FAIL" in self.resultList:
            self.log.error(testName +  " ### TEST FAILED")
            self.resultList.clear()
>           assert True == False
E           AssertionError

utilities\teststatus.py:63: AssertionError
------------------------------ Captured log call ------------------------------
p01searchpixitmedia_tests.py   27 INFO     test1_goto_google_page_started
basepage.py                 54 INFO     expectedURL ( https://www.google.co.uk ) VS currentURL ( https://www.google.co.uk )
teststatus.py               31 INFO     ### VERIFICATION SUCCESSFUL -- Currently At Google Page Verified
selenium_driver.py          70 INFO     Element found - locator (lst-ib) + locatorType (id)
selenium_driver.py          99 INFO     Clicked on element - locator (lst-ib) + locatorType (id)
selenium_driver.py          70 INFO     Element found - locator (lst-ib) + locatorType (id)
selenium_driver.py         113 INFO     Sent data (pixitmedia) on element - locator (lst-ib) + locatorType (id)
selenium_driver.py          70 INFO     Element found - locator (//span[@class='lsbb']//input[@value='Google Search']) + locatorType (xpath)
selenium_driver.py         178 INFO     Element present - locator (//span[@class='lsbb']//input[@value='Google Search']) + locatorType (xpath)
selenium_driver.py          70 INFO     Element found - locator (//span[@class='lsbb']//input[@value='Google Search']) + locatorType (xpath)
selenium_driver.py          99 INFO     Clicked on element - locator (//span[@class='lsbb']//input[@value='Google Search']) + locatorType (xpath)
selenium_driver.py          72 INFO     Element not found - locator (pixitmedia - High Performance Software Defined Storage) + locatorType (link)
selenium_driver.py         181 INFO     Element not present - locator (pixitmedia - High Performance Software Defined Storage) + locatorType (link)
selenium_driver.py          72 INFO     Element not found - locator (pixitmedia - High Performance Software Defined Sto) + locatorType (link)
selenium_driver.py         101 INFO     Cannot click on the element - locator (pixitmedia - High Performance Software Defined Sto) + locatorType (link)
basepage.py                 54 INFO     expectedURL ( https://www.pixitmedia.com ) VS currentURL ( https://www.google.co.uk )
teststatus.py               34 ERROR    ### VERIFICATION FAILED -- test1_google_pixitmedia
selenium_driver.py          38 INFO     Screenshot save to directory: C:\Users\cromox\Desktop\newselenium\UDEMY\PixitMedia\base\..\screenshots\test1_google_pixitmedia_20180929_231551_711402.png
teststatus.py               61 ERROR    now at pixitmedia page ### TEST FAILED
________________ P01SearchPixitMediaTests.test2_products_page _________________

self = <tests.p01google.p01searchpixitmedia_tests.P01SearchPixitMediaTests testMethod=test2_products_page>

    @pytest.mark.run(order=2)
    def test2_products_page(self):
        self.log.info("test2_goto_pixstor_page_started")
        self.basepixitmediaurl = self.googlesearchpage.returnCurrentURL()
        self.googlesearchpage.gotoProductsPage()
        self.googlesearchpage.gotoPixStor()
        self.googlesearchpage.viewDatasheet()
        time.sleep(3)
>       req = urlget(self.driver.current_url)

tests\p01google\p01searchpixitmedia_tests.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\tools\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:577: in current_url
    return self.execute(Command.GET_CURRENT_URL)['value']
c:\tools\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:311: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000004A9F7F0>
response = {'sessionId': '13bb0340b9a7aa294c2244357c7f3a8b', 'status': 100, 'value': {'message': 'Opera not reachable\n  (Session...  (Driver info: OperaDriver=2.36 (bf69a2a4687a45dedaabd6155fd52bb0b7eb10c5),platform=Windows NT 6.1.7601 SP1 x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: Opera not reachable
E         (Session info: chrome with embedded Chromium 68.0.3440.106)
E         (Driver info: OperaDriver=2.36 (bf69a2a4687a45dedaabd6155fd52bb0b7eb10c5),platform=Windows NT 6.1.7601 SP1 x86_64)

c:\tools\python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py:237: WebDriverException
------------------------------ Captured log call ------------------------------
p01searchpixitmedia_tests.py   41 INFO     test2_goto_pixstor_page_started
selenium_driver.py          70 INFO     Element found - locator (//*[@id="menu-item-48"]/*/*) + locatorType (xpath)
selenium_driver.py         101 INFO     Cannot click on the element - locator (//*[@id="menu-item-48"]/*/*) + locatorType (xpath)
selenium_driver.py          72 INFO     Element not found - locator (PixStor Search) + locatorType (link)
selenium_driver.py         101 INFO     Cannot click on the element - locator (PixStor Search) + locatorType (link)
selenium_driver.py          72 INFO     Element not found - locator (//span[@class='elementor-button-text']) + locatorType (xpath)
selenium_driver.py         101 INFO     Cannot click on the element - locator (//span[@class='elementor-button-text']) + locatorType (xpath)
________________ P01SearchPixitMediaTests.test3_contactus_page ________________

self = <tests.p01google.p01searchpixitmedia_tests.P01SearchPixitMediaTests testMethod=test3_contactus_page>

    @pytest.mark.run(order=3)
    def test3_contactus_page(self):
        self.log.info("test3_fill_in_contactus_page_started")
        self.googlesearchpage.gotoContactUs()
        time.sleep(3)
>       result = self.googlesearchpage.verifyPageURL("https://www.pixitmedia.com/contact-us/")

tests\p01google\p01searchpixitmedia_tests.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
base\basepage.py:44: in verifyPageURL
    currentURL = self.driver.current_url
c:\tools\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:577: in current_url
    return self.execute(Command.GET_CURRENT_URL)['value']
c:\tools\python36\lib\site-packages\selenium\webdriver\remote\webdriver.py:311: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000004A9F7F0>
response = {'sessionId': '13bb0340b9a7aa294c2244357c7f3a8b', 'status': 100, 'value': {'message': 'Opera not reachable\n  (Session...  (Driver info: OperaDriver=2.36 (bf69a2a4687a45dedaabd6155fd52bb0b7eb10c5),platform=Windows NT 6.1.7601 SP1 x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '<anonymous>')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: Opera not reachable
E         (Session info: chrome with embedded Chromium 68.0.3440.106)
E         (Driver info: OperaDriver=2.36 (bf69a2a4687a45dedaabd6155fd52bb0b7eb10c5),platform=Windows NT 6.1.7601 SP1 x86_64)

c:\tools\python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py:237: WebDriverException
------------------------------ Captured log call ------------------------------
p01searchpixitmedia_tests.py   72 INFO     test3_fill_in_contactus_page_started
selenium_driver.py          72 INFO     Element not found - locator (//*[@id="menu-item-8974"]/*/*) + locatorType (xpath)
selenium_driver.py         101 INFO     Cannot click on the element - locator (//*[@id="menu-item-8974"]/*/*) + locatorType (xpath)
========================== 3 failed in 63.45 seconds ==========================
