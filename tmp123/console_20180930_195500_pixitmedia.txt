PC-TALIBR2+cromox@PC-TALIBR2 /cygdrive/c/Users/cromox/Desktop/newselenium/UDEMY/PixitMedia
$ py.test.exe -v -s tests/p01google/p01searchpixitmedia_tests.py > consoleoutput1.txt 2>&1

PC-TALIBR2+cromox@PC-TALIBR2 /cygdrive/c/Users/cromox/Desktop/newselenium/UDEMY/PixitMedia
$ cat consoleoutput1.txt

============================= test session starts =============================
platform win32 -- Python 3.6.1, pytest-3.4.2, py-1.5.3, pluggy-0.6.0 -- c:\tools\python36\python.exe
cachedir: .pytest_cache
sensitiveurl: .*
metadata: {'Python': '3.6.1', 'Platform': 'Windows-7-6.1.7601-SP1', 'Packages': {'pytest': '3.4.2', 'py': '1.5.3', 'pluggy': '0.6.0'}, 'Plugins': {'variables': '1.7.1', 'selenium': '1.14.0', 'metadata': '1.7.0', 'html': '1.17.0', 'bdd': '2.21.0', 'base-url': '1.4.1'}, 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk8u172', 'Base URL': '', 'Driver': None, 'Capabilities': {}}
rootdir: C:\Users\cromox\Desktop\newselenium\UDEMY\PixitMedia, inifile:
plugins: variables-1.7.1, selenium-1.14.0, metadata-1.7.0, html-1.17.0, bdd-2.21.0, base-url-1.4.1
collecting ... collected 3 items

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test1_google_pixitmedia_page 
== > Running one time setUp
Python Version = 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)]
Browser version ( firefox ) = 52.5.0

--- > Running method level setUp
Result 1  =  True
ResultLast = True
PASSED
--- > Running method level tearDown

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test2_products_page 
--- > Running method level setUp
Result 1  =  True
Result 2  =  False
FAILED
--- > Running method level tearDown

tests/p01google/p01searchpixitmedia_tests.py::P01SearchPixitMediaTests::test3_contactus_page 
--- > Running method level setUp
Result 1  =  True
Result 2  =  True
ResultLast = True
PASSED
--- > Running method level tearDown

== > Running one time tearDown


================================== FAILURES ===================================
________________ P01SearchPixitMediaTests.test2_products_page _________________

self = <tests.p01google.p01searchpixitmedia_tests.P01SearchPixitMediaTests testMethod=test2_products_page>

    @pytest.mark.run(order=2)
    def test2_products_page(self):
        self.log.info("test2_goto_pixstor_page_started")
        self.basepixitmediaurl = self.googlesearchpage.returnCurrentURL()
        self.googlesearchpage.gotoProductsPage()
        self.googlesearchpage.gotoPixStor()
        self.googlesearchpage.viewDatasheet()
        time.sleep(3)
        req = urlget(self.driver.current_url)
        ## validate PDF file
        # validate1 - simple by check size & header (contain pdf type)
        result = self.googlesearchpage.verifyActualGreaterEqualExpected(int(req.headers['Content-Length']), 1000)
        self.tstatus.mark(result, "File is bigger than 1000 bytes")
        print("Result " + str(len(self.tstatus.resultList)) + "  =  " + str(result))
        result = self.googlesearchpage.verifyTextEqual(req.headers['Content-Type'], 'application/pdf')
        self.tstatus.mark(result, "File has Content-Type application/pdf")
        print("Result " + str(len(self.tstatus.resultList)) + "  =  " + str(result))
        # validate2 - download & check file using PyPDF2
        with open(self.tmpfilename, "wb") as file:
            file.write(req.content)
>       pdfproducer = PDFread(open(self.tmpfilename, 'rb')).getDocumentInfo().producer

tests\p01google\p01searchpixitmedia_tests.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\tools\python36\lib\site-packages\PyPDF2\pdf.py:1084: in __init__
    self.read(stream)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <PyPDF2.pdf.PdfFileReader object at 0x0000000004AF4278>
stream = <_io.BufferedReader name='tmptest123.pdf'>

    def read(self, stream):
        debug = False
        if debug: print(">>read", stream)
        # start at the end:
        stream.seek(-1, 2)
        if not stream.tell():
            raise utils.PdfReadError('Cannot read an empty file')
        last1K = stream.tell() - 1024 + 1 # offset of last 1024 bytes of stream
        line = b_('')
        while line[:5] != b_("%%EOF"):
            if stream.tell() < last1K:
>               raise utils.PdfReadError("EOF marker not found")
E               PyPDF2.utils.PdfReadError: EOF marker not found

c:\tools\python36\lib\site-packages\PyPDF2\pdf.py:1696: PdfReadError
------------------------------ Captured log call ------------------------------
p01searchpixitmedia_tests.py   41 INFO     test2_goto_pixstor_page_started
selenium_driver.py          70 INFO     Element found - locator (//*[@id="menu-item-48"]/*/*) + locatorType (xpath)
selenium_driver.py          99 INFO     Clicked on element - locator (//*[@id="menu-item-48"]/*/*) + locatorType (xpath)
selenium_driver.py          70 INFO     Element found - locator (PixStor Search) + locatorType (link)
selenium_driver.py          99 INFO     Clicked on element - locator (PixStor Search) + locatorType (link)
selenium_driver.py          72 INFO     Element not found - locator (//span[@class='elementor-button-text']) + locatorType (xpath)
selenium_driver.py         101 INFO     Cannot click on the element - locator (//span[@class='elementor-button-text']) + locatorType (xpath)
teststatus.py               31 INFO     ### VERIFICATION SUCCESSFUL -- File is bigger than 1000 bytes
teststatus.py               34 ERROR    ### VERIFICATION FAILED -- File has Content-Type application/pdf
selenium_driver.py          38 INFO     Screenshot save to directory: C:\Users\cromox\Desktop\newselenium\UDEMY\PixitMedia\base\..\screenshots\File_has_Content-Type_application/pdf_20180930_200047_415866.png
===================== 1 failed, 2 passed in 55.98 seconds =====================
